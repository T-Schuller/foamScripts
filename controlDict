/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | foam-extend: Open Source CFD                    |
|  \\    /   O peration     | Version:     4.0                                |
|   \\  /    A nd           | Web:         http://www.extend-project.de       |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     rheoFoam;

startFrom       latestTime;

startTime       0;

stopAt          endTime;

endTime         7;

deltaT          0.00000005;

writeControl    timeStep;

writeInterval   1000;

purgeWrite      0;

writeFormat     ascii;

writePrecision  12;

writeCompression compressed;

timeFormat      general;

timePrecision   12;

graphFormat     raw;

runTimeModifiable yes;

adjustTimeStep on;

maxCo          0.5;

maxDeltaT      0.01;

functions
{

    probes
    {

	functionObjectLibs ( "libsampling.so" );

        type            probes;

        // Name of the directory for probe data
        name            probes_${PWD##*/};

        // Write at same frequency as fields
        outputControl   timeStep;
        outputInterval  20;

        // Fields to be probed
        fields
        (
            U
	    p
        );

        probeLocations
        (
            (0 0.0001 0)
	    (0.028 0.0001 0)
	    (0.029 0.0001 0)
	    (0.030 0.0001 0)
	    (0.0306865 0.0001 0)
	    (0.031373 0.0001 0)
	    (0.031873 0.0001 0) 
	    (0.032373 0.0001 0)
        );
    }

// Monitor top Xr length along time (actually, only points of velocity inversion are computed)

    XrTop
    {
	 functionObjectLibs ("libutilityFunctionObjects.so");
	 type coded;
	 redirectType outputVort0;
	 writeControl timeStep;
         writeInterval      51;
         enabled             yes;
         
	 codeWrite
	 #{
	           
          // Lookup/create variable 

           label patchvort = mesh().boundaryMesh().findPatchID("wall_vorttop"); // Define name of BC contacting the vortex
           const polyPatch& cPatchvort = mesh().boundaryMesh()[patchvort];
           const volVectorField& U = mesh().lookupObject<volVectorField>("U");
           const volVectorField& C = mesh().C();
           

          // Define reference parameters 
 
           vector refPoint(0.031373, 0.0005, 0.); // Reference point to zero the vortex length
           vector refDir(1., 0., 0.); // Vector aligned with the wall

          // Compute vortex length based on the point of velocity inversion

           scalarList list;
           list.append(mesh().time().value()); // Time (col 0)  
           int index(0);
           scalar uPrev=0.0; vector CPrev(0., 0., 0.);
           vector refDirU(refDir/mag(refDir));
      
           forAll(cPatchvort, facei )       
              {
                label  curCell = cPatchvort.faceCells()[facei];
                scalar uCmp = (U[curCell] & refDirU);
               
                if (uPrev*uCmp<0.0)
                 { 
                   vector r_curCell = -uCmp * ( CPrev - C[curCell] ) / (uPrev - uCmp) + C[curCell];
  
                   list.append( mag( ( (r_curCell - refPoint) & refDirU ) ) ); // Distance between refPoint and inversion points (col 1:n)

                   index++;
                 } 
       
                uPrev = uCmp;
                CPrev = C[curCell];
            }  
             
          // Write data

           string comsh;           
           string filename("Xr_top.txt");
	   std::stringstream doub2str; doub2str.precision(12);

           comsh = "./writeData " + filename;
           forAll(list, id)
            {
              doub2str.str(std::string());
              doub2str << list[id]; 
              comsh += " " + doub2str.str();
            }
           
	    if (Pstream::master())
            {
	      system(comsh);
            }
        
	 #};
    }

 // Monitor top Xl length along time (actually, only points of velocity inversion are computed). Could be merged with previous codestream.

    codeWrite
    {
	 functionObjectLibs ("libutilityFunctionObjects.so");
	 type coded;
	 redirectType outputVort1;
	 writeControl timeStep;
         writeInterval      51;
         enabled             yes;

	 codeWrite
	 #{
           
          // Lookup/create variable 

           label patchvort = mesh().boundaryMesh().findPatchID("wall_liptop"); // Define name of BC contacting the vortex
           const polyPatch& cPatchvort = mesh().boundaryMesh()[patchvort];
           const volVectorField& U = mesh().lookupObject<volVectorField>("U");
           const volVectorField& C = mesh().C();

          // Define reference parameters 
 
           vector refPoint(0.031373, 0.0002, 0.); // Reference point to zero the vortex length
           vector refDir(0., 1., 0.); // Vector aligned with the wall

          // Compute vortex length based on the point of velocity inversion

           scalarList list;
           list.append(mesh().time().value()); // Time (col 0)  
           int index(0);
           scalar uPrev=0.0; vector CPrev(0., 0., 0.);
           vector refDirU(refDir/mag(refDir));
      
           forAll(cPatchvort, facei )       
              {
                label  curCell = cPatchvort.faceCells()[facei];
                scalar uCmp = (U[curCell] & refDirU);
               
                if (uPrev*uCmp<0.0)
                 {
                   vector r_curCell = -uCmp * ( CPrev - C[curCell] ) / (uPrev - uCmp) + C[curCell];
  
                   list.append( mag( ( (r_curCell - refPoint) & refDirU ) ) ); // Distance between refPoint and inversion points (col 1:n)

                   index++;
                 } 
       
                uPrev = uCmp;
                CPrev = C[curCell];
            }  
             
          // Write data

           string comsh;           
           string filename("Lip_top.txt");
	   std::stringstream doub2str; doub2str.precision(12);

           comsh = "./writeData " + filename;
           forAll(list, id)
            {
              doub2str.str(std::string());
              doub2str << list[id]; 
              comsh += " " + doub2str.str();
            }
           
	    if (Pstream::master())
            {
	      system(comsh);
            }
        
	 #};
    }

}

// ************************************************************************* //
